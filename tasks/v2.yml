---

- name: Download dnscrypt v2
  ansible.builtin.get_url:
    url: "{{ dnscryptproxyv2_url }}"
    dest: "/var/tmp/{{ dnscryptproxyv2_url | basename }}"
    mode: '0644'
    checksum: "{{ dnscryptproxyv2_hash }}"
    backup: yes
  register: dl_result
  until: dl_result is success

- name: Ensure /opt/dnscrypt-proxy2 exists
  ansible.builtin.file:
    dest: /opt/dnscrypt-proxy2
    state: directory
    mode: '0755'

- name: Decompress archive
  ansible.builtin.unarchive:
    src: "/var/tmp/{{ dnscryptproxyv2_url | basename }}"
    dest: /opt/dnscrypt-proxy2
    mode: '0755'
    copy: no
    creates: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy

- name: Check if existing config
  ansible.builtin.stat:
    path: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
  register: cfg

- name: Initiate config
  ansible.builtin.copy:
    src: /opt/dnscrypt-proxy2/linux-x86_64/example-dnscrypt-proxy.toml
    dest: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
    mode: '0644'
    remote_src: true
  when: not cfg.stat.exists

- name: Configure listen address
  ini_file:
    path: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
    section: null
    option: listen_addresses
    value: "{{ dnscryptproxyv2_listen | string }}"
    # value: "[{{ dnscryptproxyv2_listen | join(', ') }}]"
    mode: '0644'
    backup: yes

- name: Configure max_clients
  ini_file:
    path: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
    section: null
    option: max_clients
    value: "{{ dnscrypt_proxy_max_clients | default(1000) }}"
    mode: '0644'

- name: Configure other options
  ini_file:
    path: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "'{{ item.value }}'"
    mode: '0644'
    backup: yes
  with_items: "{{ dnscrypt_proxy_config }}"

- import_tasks: v2-blacklist.yml
  when: dnscrypt_proxy_blacklist|string

- name: Install dnscrypt-proxy2 service
  ansible.builtin.command: ./dnscrypt-proxy -service install
  args:
    chdir: /opt/dnscrypt-proxy2/linux-x86_64
    creates: /etc/systemd/system/dnscrypt-proxy.service

- name: Start dnscrypt-proxy2 service
  # command: ./dnscrypt-proxy -service start
  # args:
  #   chdir: /opt/dnscrypt-proxy2/linux-x86_64
  ansible.builtin.service: name=dnscrypt-proxy state=started
  when: not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")
