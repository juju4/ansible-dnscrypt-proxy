---
## ppa
## https://launchpad.net/~anton+/+archive/ubuntu/dnscrypt (most recent)
## https://launchpad.net/~xuzhen666/+archive/ubuntu/dnscrypt
## https://launchpad.net/~shnatsel/+archive/ubuntu/dnscrypt (officialy discontinued)
- name: add dnscrypt ppa
  ansible.builtin.apt_repository: repo='ppa:anton+/dnscrypt'
  when: ansible_distribution_release == 'trusty'
  register: aptr_result
  until: aptr_result is success

- name: Ensure we have a resolv.conf backup
  ansible.builtin.stat: path=/etc/resolv.conf.prednscrypt
  register: backup
- name: Backup resolv.conf
  ansible.builtin.copy:
    src: /etc/resolv.conf
    dest: /etc/resolv.conf.prednscrypt
    mode: '0644'
    remote_src: true

## FIXME! xenial: dmesg: read kernel buffer failed: Operation not permitted
## FIXME! ansible v2.2, https://github.com/ansible/ansible-modules-core/issues/5459
- name: Ubuntu | Extra packages install
  ansible.builtin.apt: name={{ dnscrypt_pkg }} state=present update_cache=yes
  ## don't start dnscrypt before we refresh resolvers file
  ## https://askubuntu.com/questions/74061/install-packages-without-starting-background-processes-and-services
  environment:
    RUNLEVEL: 1
  register: pkg_result
  until: pkg_result is success

## Exclude if xenial on lxc
- name: Ubuntu | rng-tools packages install - not on lxd xenial
  ansible.builtin.apt: name=rng-tools state=present update_cache=yes
  when: >
    ansible_distribution == 'Debian' and
    (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int < 16) and
    (ansible_virtualization_type is not defined or ansible_virtualization_type != "lxc")
  register: pkg_result
  until: pkg_result is success

# dnscrypt/switch resolv.conf to 127.0.0.2:53 with ppa
- name: Creates dnscrypt chroot directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ dnscryptproxy_user }}"
    group: root
    mode: '0755'
  with_items:
    - /var/log/dnscrypt
#        - /run/dnscrypt
## https://saintaardvarkthecarpeted.com/blog/archive/2005/08/_etc_ld_so_nohwcap.html
- name: Check if /etc/ld.so.nohwcap exists
  ansible.builtin.stat: path=/etc/ld.so.nohwcap
  register: stld
- name: Ensure /etc/ld.so.nohwcap exists
  ansible.builtin.file: path=/etc/ld.so.nohwcap state=touch mode=0644
  when: not stld.stat.exists
## pid is written as root
#    - replace: "dest=/etc/init.d/dnscrypt regexp='{{ item.regexp }}' replace='{{ item.replace }}' backup=yes"
#      with_items:
#        - { regexp: "^pidfile=/run/dnscrypt-proxy.pid", replace: "pidfile=/run/dnscrypt/dnscrypt-proxy.pid" }
## if log file enabled, not starting...
#    - lineinfile:
#        dest: /etc/init.d/dnscrypt
#        regexp: "^logfile=/var/log/dnscrypt/dnscrypt-proxy-dnscrypt.eu.log"
#        line: "logfile=/var/log/dnscrypt/dnscrypt-proxy-dnscrypt.eu.log"
#      notify: restart dnscrypt

- name: Ensure /etc/init exists
  ansible.builtin.file:
    dest: /etc/init
    state: directory
    mode: '0755'

- name: install dnscrypt configuration
  ansible.builtin.copy: 'src=dnscrypt-proxy.conf dest=/etc/init/dnscrypt-proxy.conf backup=yes mode=0644'
  notify: restart dnscrypt
- name: ensure target server is present in dnscrypt-resolvers.csv
  ansible.builtin.command: "grep {{ dnscrypt_proxy_resolver_name161 }} /usr/share/dnscrypt-proxy/dnscrypt-resolvers.csv"
  register: checkserver
  changed_when: false

- name: Ubuntu trusty, xenial
  block:
    - name: configure target server
      ansible.builtin.replace:
        dest: /etc/default/dnscrypt-proxy
        regexp: '^DNSCRYPT_PROXY_RESOLVER_NAME=.*'
        replace: "DNSCRYPT_PROXY_RESOLVER_NAME={{ dnscrypt_proxy_resolver_name161 }}"
        mode: '0644'
        backup: yes
    - name: add ephemeral-keys to default
      ansible.builtin.lineinfile:
        dest: /etc/default/dnscrypt-proxy
        regexp: "^ephemeral-keys"
        line: "ephemeral-keys"
        mode: '0644'
      notify: restart dnscrypt
    - name: add logfile to default
      ansible.builtin.lineinfile:
        dest: /etc/default/dnscrypt-proxy
        regexp: "^logfile="
        line: "logfile=/var/log/dnscrypt/dnscrypt.log"
        mode: '0644'
      notify: restart dnscrypt
  when: ansible_distribution_release == 'trusty' or ansible_distribution_release == 'xenial'

- name: check if apparmor config is present
  ansible.builtin.stat: path=/etc/apparmor.d/usr.sbin.dnscrypt-proxy
  register: armor
- name: Apparmor
  block:
    - name: allow logfile writing inside apparmor
      ansible.builtin.lineinfile:
        dest: /etc/apparmor.d/usr.sbin.dnscrypt-proxy
        regexp: '{{ item.r }}'
        line: '{{ item.l }}'
        mode: '0644'
        insertafter: '/run/dnscrypt-proxy.pid'
      with_items:
        - { r: '  /var/log/dnscrypt/,', l: '  /var/log/dnscrypt/dnscrypt.log mrw,' }
        - { r: '  capability dac_override,', l: '  capability dac_override,' }
      notify: restart apparmor
  when: armor.stat.exists

- name: ensure resolvers directory exists
  ansible.builtin.file: dest=/usr/share/dnscrypt-proxy state=directory mode=0755

- import_tasks: resolvers-update.yml
  when: ansible_distribution_release == 'xenial' and dnscrypt_resolvers_update
