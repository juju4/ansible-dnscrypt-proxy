---
## ppa
## https://launchpad.net/~anton+/+archive/ubuntu/dnscrypt (most recent)
## https://launchpad.net/~xuzhen666/+archive/ubuntu/dnscrypt
## https://launchpad.net/~shnatsel/+archive/ubuntu/dnscrypt (officialy discontinued)
- name: add dnscrypt ppa
  apt_repository: repo='ppa:anton+/dnscrypt'
  when: ansible_distribution_release == 'trusty'

- name: Ensure we have a resolv.conf backup
  stat: path=/etc/resolv.conf.prednscrypt
  register: backup
- name: Backup resolv.conf
  copy:
    src: /etc/resolv.conf
    dest: /etc/resolv.conf.prednscrypt
    remote_src: true

## FIXME! xenial: dmesg: read kernel buffer failed: Operation not permitted
## FIXME! ansible v2.2, https://github.com/ansible/ansible-modules-core/issues/5459
- name: Ubuntu | Extra packages install
  apt: name={{item}} state=present update_cache=yes
  with_items: "{{ dnscrypt_pkg }}"
## don't start dnscrypt before we refresh resolvers file
## https://askubuntu.com/questions/74061/install-packages-without-starting-background-processes-and-services
  environment:
    RUNLEVEL: 1

## Exclude if xenial on lxc
- name: Ubuntu | rng-tools packages install - not on lxd xenial
  apt: name={{item}} state=present update_cache=yes
  with_items:
    - rng-tools
  when: ansible_distribution == 'Debian' and (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int < 16) and (ansible_virtualization_type is not defined or ansible_virtualization_type != "lxc")

# dnscrypt/switch resolv.conf to 127.0.0.2:53 with ppa
- name: Creates dnscrypt chroot directory
  file: path={{ item }} state=directory owner={{ dnscryptproxy_user }} group=root mode=0755
  with_items:
    - /var/log/dnscrypt
#        - /run/dnscrypt
## https://saintaardvarkthecarpeted.com/blog/archive/2005/08/_etc_ld_so_nohwcap.html
- stat: path=/etc/ld.so.nohwcap
  register: stld
- name: Ensure /etc/ld.so.nohwcap exists
  file: path=/etc/ld.so.nohwcap state=touch
  when: not stld.stat.exists
## pid is written as root
#    - replace: "dest=/etc/init.d/dnscrypt regexp='{{ item.regexp }}' replace='{{ item.replace }}' backup=yes"
#      with_items:
#        - { regexp: "^pidfile=/run/dnscrypt-proxy.pid", replace: "pidfile=/run/dnscrypt/dnscrypt-proxy.pid" }
## if log file enabled, not starting...
#    - lineinfile: 'dest=/etc/init.d/dnscrypt regexp="^logfile=/var/log/dnscrypt/dnscrypt-proxy-dnscrypt.eu.log" line="logfile=/var/log/dnscrypt/dnscrypt-proxy-dnscrypt.eu.log"'
#      notify: restart dnscrypt

- name: install dnscrypt configuration
  copy: 'src=dnscrypt-proxy.conf dest=/etc/init/dnscrypt-proxy.conf backup=yes mode=0644'
  notify: restart dnscrypt
- name: ensure target server is present in dnscrypt-resolvers.csv
  command: "grep {{ dnscrypt_proxy_resolver_name161 }} /usr/share/dnscrypt-proxy/dnscrypt-resolvers.csv"
  register: checkserver
  changed_when: false
- name: configure target server
  replace:
    dest: /etc/default/dnscrypt-proxy
    regexp: '^DNSCRYPT_PROXY_RESOLVER_NAME=.*'
    replace: "DNSCRYPT_PROXY_RESOLVER_NAME={{Â dnscrypt_proxy_resolver_name161 }}"
    backup: yes
- name: add ephemeral-keys to default
  lineinfile: 'dest=/etc/default/dnscrypt-proxy regexp="^ephemeral-keys" line="ephemeral-keys"'
  notify: restart dnscrypt
- name: add logfile to default
  lineinfile: 'dest=/etc/default/dnscrypt-proxy regexp="^logfile=" line="logfile=/var/log/dnscrypt/dnscrypt.log"'
  notify: restart dnscrypt

- name: check if apparmor config is present
  stat: path=/etc/apparmor.d/usr.sbin.dnscrypt-proxy
  register: armor
- block:
    - name: allow logfile writing inside apparmor
      lineinfile: "dest=/etc/apparmor.d/usr.sbin.dnscrypt-proxy regexp='{{ item.r }}' line='{{ item.l }}' insertafter='/run/dnscrypt-proxy.pid'"
      with_items:
        - { r: '  /var/log/dnscrypt/,', l: '  /var/log/dnscrypt/dnscrypt.log mrw,' }
        - { r: '  capability dac_override,', l: '  capability dac_override,' }
      notify: restart apparmor
  when: armor.stat.exists

- name: ensure resolvers directory exists
  file: dest=/usr/share/dnscrypt-proxy state=directory mode=0755

- include: resolvers-update.yml
  when: ansible_distribution_release == 'xenial' and dnscrypt_resolvers_update

