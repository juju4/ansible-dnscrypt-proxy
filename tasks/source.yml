---
## Manual build?
#    - name: git clone dnscrypt-proxy
#      git:
#        repo=https://github.com/opendns/dnscrypt-proxy
#        dest=/home/{{ dnscryptproxy_user }}/dnscrypt-proxy
#      become: yes
#      become_user: "{{ dnscryptproxy_user }}"

## "msg": "Failed to validate the SSL certificate for download.dnscrypt.org:443. Make sure your managed systems have a valid CA certificate installed. If the website serving the url uses SNI you need python >= 2.7.9 on your managed machine or you can install the `urllib3`, `pyopenssl`, `ndg-httpsclient`, and `pyasn1` python modules to perform SNI verification in python >= 2.6. You can use validate_certs=False if you do not need to confirm the servers identity but this is unsafe and not recommended. Paths checked for this platform: /etc/ssl/certs, /etc/pki/ca-trust/extracted/pem, /etc/pki/tls/certs, /usr/share/ca-certificates/cacert.org, /etc/ansible"
## = validate_certs=no + checksums

- stat: path=/usr/lib64/libsodium.so.13
  register: rpmlib
- stat: path=/usr/local/lib/libsodium.so
  register: stlib
- block:
    ## note certificate switched to let's encrypt
#    - name: get archive checksum
#      shell: "dig +short +dnssec TXT {{ dnscryptproxy_libsodium_url | basename }}.download.dnscrypt.org | sed '1s/\"//g;2d'"
#      register: dnscryptproxy_libsodium_checksum
    - name: download libsodium archive
      get_url: url={{ dnscryptproxy_libsodium_url }} dest=/root/{{ dnscryptproxy_libsodium_url | basename }} validate_certs=no checksum=sha256:{{ dnscryptproxy_libsodium_checksum }}
      when: not stlib.stat.exists and not rpmlib.stat.exists
    - set_fact:
        lsdir: "{{ dnscryptproxy_libsodium_url | basename }}"
    - name: decompress archive
      unarchive: src=/root/{{ dnscryptproxy_libsodium_url | basename }} dest=/root/ copy=no
    - name: Build libsodium
      shell: "cd /root/{{ lsdir[:-7] }} && ./configure && make -j2"
      notify:
        - ldconfig
      when: not stlib.stat.exists and not rpmlib.stat.exists
    - name: Install libsodium from source
      become: yes
      command: "make install chdir=/root/{{ lsdir[:-7] }}"
## required for compilation of dnscrypt
    - name: ldconfig
      command: ldconfig
  when: not stlib.stat.exists and not rpmlib.stat.exists

- stat: path=/usr/local/sbin/dnscrypt-proxy
  register: stbin
- name: get archive checksum
  shell: "dig +short +dnssec TXT {{ dnscryptproxy_url | basename }}.download.dnscrypt.org | sed '1s/\"//g;2d'"
  register: dnscryptproxy_checksum
- debug: var={{ dnscryptproxy_checksum.stdout }}
- name: download archive
  get_url: url={{ dnscryptproxy_url }} dest=/root/{{ dnscryptproxy_url | basename }} mode=0440 validate_certs=no checksum=sha256:{{ dnscryptproxy_checksum.stdout }}
  when: not stbin.stat.exists
- name: decompress archive
  unarchive: src=/root/{{ dnscryptproxy_url | basename }} dest=/root/ copy=no
- set_fact:
    dpdir: "{{ dnscryptproxy_url | basename }}"
- name: Build dnscrypt-proxy
  shell: "cd /root/{{ dpdir[:-7] }} && ./configure && make -j2"
  when: not stbin.stat.exists
- name: Install dnscrypt-proxy
  become: yes
  command: "make install chdir=/root/{{ dpdir[:-7] }}"
  when: not stbin.stat.exists

- name: create dnscrypt user '{{ dnscryptproxy_user }}'
  user: name={{ dnscryptproxy_user }} comment="dnscrypt user" system=yes

- name: add separate script to manage multi dnscrypt server
  copy: src=dnscrypt-proxy-multi.sh dest=/usr/local/bin/dnscrypt-proxy-multi.sh mode=0755

- name: ensure log directory exists
  file: path=/var/log/dnscrypt mode=0755 owner={{ dnscryptproxy_user }} state=directory

- command: /usr/local/bin/dnscrypt-proxy-multi.sh

