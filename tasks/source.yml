---
## Manual build?
#    - name: git clone dnscrypt-proxy
#      git:
#        repo=https://github.com/opendns/dnscrypt-proxy
#        dest=/home/{{ dnscryptproxy_user }}/dnscrypt-proxy
#      become: yes
#      become_user: "{{ dnscryptproxy_user }}"

- name: source build dependencies packages install
  package: name={{ item }} state=present
  with_items: "{{ dnscryptproxy_src_deps }}"

- block:
    - name: source build dependencies packages install with systemd
      package: name={{ item }} state=present
      with_items: "{{ dnscryptproxy_src_systemd_deps }}"
    - name: Set fact configure_args
      set_fact:
        configure_args: "--with-systemd"
  when: ansible_service_mgr == 'systemd'

- name: Check if /usr/lib64/libsodium.so.13 exists
  stat: path=/usr/lib64/libsodium.so.13
  register: rpmlib
- name: Check if /usr/local/lib/libsodium.so exists
  stat: path=/usr/local/lib/libsodium.so
  register: stlib
- block:
    - name: download libsodium archive
      get_url:
        url: "{{ dnscryptproxy_libsodium_url }}"
        dest: "/root/{{ dnscryptproxy_libsodium_url | basename }}"
        checksum: "sha256:{{ dnscryptproxy_libsodium_checksum }}"
#        validate_certs: no
      when: not stlib.stat.exists and not rpmlib.stat.exists
    - name: Set fact lsdir
      set_fact:
        lsdir: "{{ dnscryptproxy_libsodium_url | basename }}"
    - name: decompress archive
      unarchive: src=/root/{{ dnscryptproxy_libsodium_url | basename }} dest=/root/ copy=no
    - name: Build libsodium
      shell: "./configure --prefix={{ dnscryptproxy_source_prefix }} && make -j2"
      args:
        chdir: "/root/{{ lsdir[:-7] }}"
      notify:
        - ldconfig
      when: not stlib.stat.exists and not rpmlib.stat.exists
    - name: Install libsodium from source
      become: yes
      command: "make install chdir=/root/{{ lsdir[:-7] }}"
## required for compilation of dnscrypt
    - name: ldconfig
      command: ldconfig
  when: not stlib.stat.exists and not rpmlib.stat.exists

- name: download dnscrypt archive
  get_url:
    url: "{{ dnscryptproxy_url }}"
    dest: "/root/{{ dnscryptproxy_url | basename }}"
    mode: '0644'
    checksum: "{{ dnscryptproxy_hash }}"
    backup: yes
  when: not (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '6')
- name: download dnscrypt archive - centos6 wget/Python SNI
  command: "wget -O /root/{{ item | basename }} {{ item }} creates=/root/{{ item | basename }}"
  with_items:
    - "{{ dnscryptproxy_url }}"
#    - "{{ dnscryptproxy_url }}.sig"
  when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '6')

- name: ensure unzip is present for unarchive
  package:
    name: unzip
    state: present

- name: decompress archive
  unarchive: src=/root/{{ dnscryptproxy_url | basename }} dest=/root/ copy=no
- name: Set fact dpdir
  set_fact:
    dpdir: "dnscrypt-proxy-{{ dnscryptproxy_url | basename | regex_replace('.zip$', '') }}"
- name: Build dnscrypt-proxy
  shell: "{{ item }}"
  args:
    chdir: "/root/{{ dpdir }}"
    creates: "/root/{{ dpdir }}/src/proxy/dnscrypt-proxy"
  with_items:
#    - "autoreconf -i --force"
    - "aclocal"
    - "autoconf"
    - "autoheader"
    - "automake --add-missing"
    - "./configure --prefix={{ dnscryptproxy_source_prefix }} {{ configure_args | default('') }}"
    - "make -j2"
- name: Install dnscrypt-proxy
  become: yes
  command: "make install"
  args:
    chdir: "/root/{{ dpdir }}"
    creates: "{{ dnscryptproxy_source_prefix }}/sbin/dnscrypt-proxy"

- name: Set fact dnscryptproxy_user
  set_fact:
    dnscryptproxy_user: _dnscrypt-proxy
- name: create dnscrypt user '{{ dnscryptproxy_user }}'
  user: name={{ dnscryptproxy_user }} comment="dnscrypt user" system=yes

- name: add separate script to manage multi dnscrypt server
  copy: src=dnscrypt-proxy-multi.sh dest=/usr/local/bin/dnscrypt-proxy-multi.sh mode=0755

- name: ensure log directory exists
  file: path=/var/log/dnscrypt mode=0755 owner={{ dnscryptproxy_user }} state=directory

- name: review configuration
  lineinfile:
    dest: "{{ dnscryptproxy_source_prefix }}/etc/dnscrypt-proxy.conf"
    regexp: "{{ item.re }}"
    line: "{{ item.l }}"
    insertafter: "{{ item.i }}"
    backup: yes
  with_items:
    - { re: '^User .*', l: 'User _dnscrypt-proxy', i: '^# User _dnscrypt-proxy' }
  notify:
    - restart dnscrypt

- block:
    - name: ensure dnscrypt-proxy systemd service file is present
      copy:
        src: "/root/{{ dpdir }}/{{ item }}"
        dest: "/lib/systemd/system/{{ item }}"
        mode: '0644'
        backup: yes
      with_items:
        - dnscrypt-proxy.service
        - dnscrypt-proxy.socket
      notify:
        - reload systemd
    - name: use 127.0.0.2 as binding interface
      replace:
        dest: /lib/systemd/system/dnscrypt-proxy.socket
        regexp: 127.0.0.1
        replace: 127.0.0.2
        backup: yes
      notify:
        - reload systemd
  when: ansible_service_mgr == 'systemd'

- block:
    - name: enable daemon mode in configuration
      lineinfile:
        dest: "{{ dnscryptproxy_source_prefix }}/etc/dnscrypt-proxy.conf"
        regexp: "{{ item.re }}"
        line: "{{ item.rep }}"
        backup: yes
      with_items:
        - { re: "^Daemonize .*", rep: "Daemonize yes" }
        - { re: "^LocalAddress .*", rep: "LocalAddress 127.0.0.2:53" }
      notify:
        - restart dnscrypt
  when: ansible_service_mgr != 'systemd'

- block:
    - name: install init script
      template:
        src: init-dnscrypt-proxy.j2
        dest: /etc/init.d/dnscrypt-proxy
        mode: '0755'
        backup: yes
  when: ansible_service_mgr != 'systemd' and ansible_distribution_release != 'trusty'

- block:
    - name: install upstart script
      template:
        src: upstart-dnscrypt-proxy.conf.j2
        dest: /etc/init/dnscrypt-proxy.conf
        mode: '0644'
        backup: yes
  when: ansible_distribution_release == 'trusty'

## ensure systemd has reload its configuration
- meta: flush_handlers
- name: ensure dnscrypt-proxy service is enabled and started.
  service: name=dnscrypt-proxy state=started enabled=yes
