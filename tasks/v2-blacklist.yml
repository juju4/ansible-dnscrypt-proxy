---

- name: Configure blacklist
  ini_file:
    path: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
    section: blacklist
    option: blacklist_file
    value: "'{{ dnscrypt_proxy_blacklist_path }}/{{ dnscrypt_proxy_blacklist | basename }}'"
    mode: '0644'
    backup: yes

- name: Configure blacklist logging
  ini_file:
    path: /opt/dnscrypt-proxy2/linux-x86_64/dnscrypt-proxy.toml
    section: blacklist
    option: log_file
    value: "'{{ dnscrypt_proxy_blacklist_logpath | default(omit) }}'"
    mode: '0644'
    backup: yes

- name: Ensure blacklist cache directory exists
  file:
    dest: "{{ dnscrypt_proxy_blacklist_path }}"
    state: directory
    mode: '0755'
    owner: nobody

- name: Debian | ensure cron is installed
  apt: name=cron state=present
  when: ansible_os_family == 'Debian'
  register: pkg_result
  until: pkg_result is success

- name: RedHat | ensure cron is installed
  yum: name=crontabs state=present
  when: ansible_os_family == "RedHat"
  register: pkg_result
  until: pkg_result is success

- name: Ensure curl package is present for cron
  package:
    name: curl
    state: present

- name: set file for exclusions
  template:
    src: "{{ dnscrypt_proxy_blacklist_exclude_template }}.j2"
    dest: "{{ dnscrypt_proxy_blacklist_exclude }}"
    mode: '0644'
    backup: yes

- name: Ensure schedule task to retrieve blacklist
  cron:
    name: dnscrypt blacklist update
    minute: '0'
    hour: '2'
    user: nobody
    job: >
      curl {{ dnscrypt_proxy_blacklist }} | egrep -v -f {{ dnscrypt_proxy_blacklist_exclude }} > {{ dnscrypt_proxy_blacklist_path }}/{{ dnscrypt_proxy_blacklist | basename }}
    cron_file: ansible_dnscrypt-proxy2_blacklist

- name: Check if blacklist file
  stat:
    path: "{{ dnscrypt_proxy_blacklist_path }}/{{ dnscrypt_proxy_blacklist | basename }}"
  register: blacklistf

- name: Ensure initial blacklist exists
  get_url:
    url: "{{ dnscrypt_proxy_blacklist }}"
    dest: "{{ dnscrypt_proxy_blacklist_path }}/{{ dnscrypt_proxy_blacklist | basename }}"
    owner: nobody
    mode: '0644'
  register: dl_result
  until: dl_result is success
  when: not blacklistf.stat.exists
